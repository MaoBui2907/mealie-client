name: Build, Test & Deploy to PyPI

on:
  push:
    branches: [main]

jobs:
  build-test-deploy:
    name: Build, Test and Deploy
    runs-on: ubuntu-latest
    env:
      # Control how the version is bumped during CI runs. Possible values: patch, minor, major, or explicit version.
      # Leave this secret empty or unset to skip the bump.
      CI_VERSION_BUMP: ${{ secrets.CI_VERSION_BUMP }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install PDM
      uses: pdm-project/setup-pdm@v3
      with:
        python-version: '3.11'
      
    - name: Install dependencies
      run: |
        pdm install -G dev,publish
        
    - name: Run tests with coverage
      run: |
        # Using pytest configuration from pyproject.toml (includes coverage & fail-under=85)
        pdm run pytest -v --maxfail=5
      env:
          E2E_MEALIE_API_TOKEN: ${{ secrets.E2E_MEALIE_API_TOKEN }}
          E2E_MEALIE_BASE_URL: ${{ secrets.E2E_MEALIE_BASE_URL }}
          E2E_MEALIE_USERNAME: ${{ secrets.E2E_MEALIE_USERNAME }}
          E2E_MEALIE_PASSWORD: ${{ secrets.E2E_MEALIE_PASSWORD }}
          E2E_CLEANUP_DATA: true
          E2E_TIMEOUT: 30
          E2E_MAX_RETRIES: 3

    - name: Archive coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage.xml
        
    - name: Bump project version (optional)
      if: ${{ env.CI_VERSION_BUMP != '' }}
      run: |
        echo "üìù Bumping version using type: $CI_VERSION_BUMP"
        python scripts/bump_version.py "$CI_VERSION_BUMP"

    - name: Build package
      run: |
        pdm build
        
    - name: Verify build
      run: |
        ls -la dist/
        pip install dist/*.whl
        python -c "import mealie_client; print(f'‚úÖ Package installed successfully: v{mealie_client.__version__}')"
        
    - name: Upload to PyPI Test
      run: |
        pdm run twine upload --repository testpypi dist/* --skip-existing --verbose
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TEST_TOKEN }}
        
    - name: Upload to Production PyPI
      run: |
        pdm run twine upload dist/* --skip-existing --verbose
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }} 